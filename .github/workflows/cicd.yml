name: Java CI with Maven

on:
  push:
    branches: [ main , develop]
  pull_request:
    branches: [ main , develop ]
    
  workflow_dispatch:

jobs:
  
  build:
    runs-on: ubuntu-latest
    steps:
    
#     Checkout nodes, as in give access to your code 
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
          
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Test Coverage
      run: mvn -B test --file pom.xml
      
    - name: Package 
      run: mvn -B package --file pom.xml
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    - uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:    
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - uses: actions/download-artifact@master
      with:
        name: artifacts
        
    - name: Get branch name
      shell: bash
      id: get_branch_name
      run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)">> $GITHUB_ENV
        
        
    - name: Print branch name
      shell: bash
      id: print_branch_name
      run: | 
        echo ${{env.BRANCH_NAME}}
        echo "$BRANCH_NAME"
        
 
    - name: Set runtime properties for develop branch
      id: set_runtime_properties_dev
      if: ${{ env.BRANCH_NAME == 'develop' }}
      # This is another way, where values are added as github env variables but this didnt work
      run: |
        echo "MULE_ENV=$(echo "QA")">> $GITHUB_ENV
        echo "MULE_KEY=$(echo ${{secrets.MULE_KEY}})">> $GITHUB_ENV
        echo "DEPLOYMNET_ENV = QA " >> $GITHUB_ENV
        echo "BUSINESS_GROUP_ID = ${{secrets.BUSINESS_GROUP_ID}}" >> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_ID = ${secrets.ANYPOINT_PLATFORM_CLIENT_ID_QA} " >> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_SECRET = ${secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_QA} " >> $GITHUB_ENV
      

      
#     - name: Deploy to CloudHub
#       if: ${{ steps.get_branch_name.outputs.BRANCH_NAME == 'develop' }}
#       env:
#         USERNAME: ${{ secrets.username }}
#         PASSWORD: ${{ secrets.password }}
#         MULE_ENV: ${{steps.set_runtime_properties_dev.outputs.MULE_ENV}}
#         MULE_KEY: ${{steps.set_runtime_properties_dev.outputs.MULE_KEY}}
#         DEPLOYMENT_ENV: ${{steps.set_runtime_properties_dev.outputs.DEPLOYMENT_ENV}}
#         BUSINESS_GROUP_ID: ${{steps.set_runtime_properties_dev.outputs.BUSINESS_GROUP_ID}}
#         ANYPOINT_PLATFORM_CLIENT_ID: ${{steps.set_runtime_properties_dev.outputs.ANYPOINT_PLATFORM_CLIENT_ID}}
#         ANYPOINT_PLATFORM_CLIENT_SECRET: ${{steps.set_runtime_properties_dev.outputs.ANYPOINT_PLATFORM_CLIENT_ID}}
#       run: |
#          artifactName=$(ls *.jar | head -1)
#           mvn mule:deploy -Dmule.artifact=$artifactName -Dusername="$USERNAME" -Dpassword="$PASSWORD" -DbusinessgroupId="$BUSINESS_GROUP_ID" -Danypoint.platform.client_id="$ANYPOINT_PLATFORM_CLIENT_ID" -Danypoint.platform.client_secret="$ANYPOINT_PLATFORM_CLIENT_SECRET" -Denvironment="$DEPLOYMENT_ENV" -Dmule.env="$MULE_ENV" -Dmule.key="$MULE_KEY"
