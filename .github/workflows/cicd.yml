name: Java CI with Maven

on:
  push:
    branches: [ main , develop]
  pull_request:
    branches: [ main ]
    
  workflow_dispatch:

jobs:
  
#   build:
#     runs-on: ubuntu-latest
#     steps:
    
# #     Checkout nodes, as in give access to your code 
#     - uses: actions/checkout@v2
#     - uses: actions/cache@v1
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
          
#     - name: Set up JDK 1.8
#       uses: actions/setup-java@v1
#       with:
#         java-version: 1.8
# #     - name: Test Coverage
# #       run: mvn -B test --file pom.xml
      
#     - name: Package 
#       run: mvn -B package --file pom.xml
#     - name: Stamp artifact file name with commit hash
#       run: |
#         artifactName1=$(ls target/*.jar | head -1)
#         commitHash=$(git rev-parse --short "$GITHUB_SHA")
#         artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/.$commitHash.jar/g")
#         mv $artifactName1 $artifactName2
#     - uses: actions/upload-artifact@master
#       with:
#           name: artifacts
#           path: target/*.jar

  deploy:
      #     needs: build
    runs-on: ubuntu-latest
    steps:    
#     - uses: actions/checkout@v2
#     - uses: actions/cache@v1
#       with:
#         path: ~/.m2/repository
#         key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#         restore-keys: |
#           ${{ runner.os }}-maven-
#     - uses: actions/download-artifact@master
#       with:
#         name: artifacts
        
    - name: get branch details
      shell: bash
      id: get_branch
      run: |
        echo "::set-output name=BRANCH_NAME::$(echo ${GITHUB_REF#refs/heads/} | tr / -)" 
        
        
    - name: print env
      shell: bash
      id: print_env
      run: echo ${{ steps.get_branch.outputs.BRANCH_NAME }}

      
      
    - name: Set runtime properties for develop branch
      if: ${{ steps.get_branch.outputs.BRANCH_NAME == 'develop' }}
      run: |
        echo "MULE_ENV = DEV " >> $GITHUB_ENV
        echo "MULE_KEY = ${{secrets.MULE_KEY}} " >> $GITHUB_ENV
        echo "DEPLOYMNET_ENV = Development " >> $GITHUB_ENV
        echo "BUSINESS_GROUP_ID = ${{secrets.BUSINESS_GROUP_ID}}"
        echo "ANYPOINT_PLATFORM_CLIENT_ID = ${secrets.ANYPOINT_PLATFORM_CLIENT_ID_DEVELOP} " >> $GITHUB_ENV
        echo "ANYPOINT_PLATFORM_CLIENT_SECRET = ${secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_DEVELOP} " >> $GITHUB_ENV
        
    - name: Set runtime properties for QA branch
      id: set_values
      if: ${{ steps.get_branch.outputs.BRANCH_NAME == 'main' }}
      shell: bash

#       run: |
#         echo "MULE_ENV = QA " >> $GITHUB_ENV
#         echo "MULE_KEY = ${{secrets.MULE_KEY}} " >> $GITHUB_ENV
#         echo "DEPLOYMNET_ENV = QA " >> $GITHUB_ENV
#         echo "BUSINESS_GROUP_ID = ${{secrets.BUSINESS_GROUP_ID}}" >> $GITHUB_ENV
#         echo "ANYPOINT_PLATFORM_CLIENT_ID = ${secrets.ANYPOINT_PLATFORM_CLIENT_ID_QA} " >> $GITHUB_ENV
#         echo "ANYPOINT_PLATFORM_CLIENT_SECRET = ${secrets.ANYPOINT_PLATFORM_CLIENT_SECRET_QA} " >> $GITHUB_ENV
      run: |
              echo "::set-output name=MULE_ENV::QA/" 
              echo "::set-output name=MULE_KEY::mulekey//" 
              echo "::set-output name=DEPLOYMNET_ENV::QA// " 
              echo "::set-output name=BUSINESS_GROUP_ID::business group id//"
              echo "::set-output name=ANYPOINT_PLATFORM_CLIENT_ID::clientid// " 
              echo "::set-output name=ANYPOINT_PLATFORM_CLIENT_SECRET::clientsecret// " 

    - name: print the values
      shell: bash

#       run : echo '${{env.BRANCH_NAME}}'
      run: echo  "Values are ${{steps.set_values.outputs.ANYPOINT_PLATFORM_CLIENT_SECRET}}"
      
#     - name: Deploy to CloudHub
#       env:
        
#         USERNAME: ${{ secrets.username }}
#         PASSWORD: ${{ secrets.password }}
#       run: |
#         artifactName=$(ls *.jar | head -1)
#         mvn mule:deploy -Dmule.artifact=$artifactName -Danypoint.userName="$USERNAME" -Danypoint.password="$PASSWORD"
